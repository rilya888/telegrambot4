import logging
import io
import os
import tempfile
import asyncio
from datetime import datetime, time
from typing import Optional, Dict, Any
from collections import OrderedDict
import speech_recognition as sr
from pydub import AudioSegment
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from database import UserDatabase

from config import setup_logging, API_CACHE_SIZE, BOT_TOKEN
from utils import (
    validate_user_input, extract_calories_from_text, 
    format_calorie_response, safe_reply, create_image_hash, create_text_hash
)
from api_client import api_client

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logging()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = UserDatabase()

# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—ç—à —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞ (LRU)
api_cache = OrderedDict()


def _update_cache(cache: OrderedDict, key: str, value: str, max_size: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Å LRU –ª–æ–≥–∏–∫–æ–π"""
    if key in cache:
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∫–æ–Ω–µ—Ü (–ø–æ—Å–ª–µ–¥–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π)
        cache.move_to_end(key)
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
        cache[key] = value
        # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç, —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç
        if len(cache) > max_size:
            cache.popitem(last=False)

def analyze_food_image(image_data: bytes) -> str:
    """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ–¥—ã —á–µ—Ä–µ–∑ Nebius API —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ö—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        image_hash = create_image_hash(image_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if image_hash in api_cache:
            logger.info("Using cached result for image analysis")
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∫–æ–Ω–µ—Ü –¥–ª—è LRU
            api_cache.move_to_end(image_hash)
            return api_cache[image_hash]
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API –∫–ª–∏–µ–Ω—Ç
        result_text = api_client.analyze_image(image_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à —Å LRU –ª–æ–≥–∏–∫–æ–π
        _update_cache(api_cache, image_hash, result_text, API_CACHE_SIZE)
        
        return result_text
        
    except Exception as e:
        logger.error(f"Error analyzing image: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    username = update.effective_user.username or "unknown"
    
    logger.info(f"User {user_id} ({username}) started the bot")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ (–Ω–æ–≤—ã–π –¥–µ–Ω—å)
    await check_and_reset_daily_meals(context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = db.get_user(user_id)
    
    if not user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        logger.info(f"New user {user_id} ({username}) starting registration")
        await start_registration(update, context)
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        logger.info(f"Existing user {user_id} ({username}) accessing main menu")
        keyboard = [
            [InlineKeyboardButton("üçΩÔ∏è –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ", callback_data="add_food")],
            [InlineKeyboardButton("üîç –•–æ—á—É –∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π", callback_data="quick_analysis")],
            [InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="main_menu_submenu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        daily_calories = user.get('daily_calories', 0)
        await update.message.reply_text(
            f"üçï –ü—Ä–∏–≤–µ—Ç, {user.get('name', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}!\n\n"
            f"–í–∞—à–∞ —Å—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {daily_calories} –∫–∫–∞–ª\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

async def start_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    keyboard = [
        [InlineKeyboardButton("üìù –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="start_registration")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üçï –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π –º–Ω–µ –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å.\n\n"
        "–Ø –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –≤–∞—à–µ–º –≤–æ–∑—Ä–∞—Å—Ç–µ, —Ä–æ—Å—Ç–µ, –≤–µ—Å–µ –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:",
        reply_markup=reply_markup
    )


def analyze_food_text(text_description: str) -> str:
    """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –µ–¥—ã —á–µ—Ä–µ–∑ Nebius API —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ö—ç—à —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        text_hash = create_text_hash(text_description)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if text_hash in api_cache:
            logger.info("Using cached result for text analysis")
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∫–æ–Ω–µ—Ü –¥–ª—è LRU
            api_cache.move_to_end(text_hash)
            return api_cache[text_hash]
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ API –∫–ª–∏–µ–Ω—Ç
        result_text = api_client.analyze_text(text_description)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à —Å LRU –ª–æ–≥–∏–∫–æ–π
        _update_cache(api_cache, text_hash, result_text, API_CACHE_SIZE)
        
        return result_text
        
    except Exception as e:
        logger.error(f"Error analyzing text: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –æ–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

def transcribe_voice(audio_data: bytes) -> Optional[str]:
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    temp_files = []
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
        with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_ogg:
            temp_ogg.write(audio_data)
            temp_ogg_path = temp_ogg.name
            temp_files.append(temp_ogg_path)
        
        with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as temp_wav:
            temp_wav_path = temp_wav.name
            temp_files.append(temp_wav_path)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º OGG –≤ WAV
        audio = AudioSegment.from_ogg(temp_ogg_path)
        audio.export(temp_wav_path, format="wav")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å —Ä–µ—á–∏
        recognizer = sr.Recognizer()
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
        with sr.AudioFile(temp_wav_path) as source:
            audio_record = recognizer.record(source)
            text = recognizer.recognize_google(audio_record, language="ru-RU")
        
        logger.info(f"Successfully transcribed voice: {text[:50]}...")
        return text
        
    except sr.UnknownValueError:
        logger.warning("Could not understand audio")
        return None
    except sr.RequestError as e:
        logger.error(f"Error with speech recognition service: {e}")
        return None
    except Exception as e:
        logger.error(f"Error transcribing voice: {e}")
        return None
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        for temp_file in temp_files:
            try:
                if os.path.exists(temp_file):
                    os.remove(temp_file)
            except OSError as e:
                logger.warning(f"Could not remove temp file {temp_file}: {e}")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "start_registration":
        await start_registration_flow(query, context)
    elif query.data == "photo_analysis":
        meal_type = context.user_data.get('selected_meal_type', 'üçΩÔ∏è –ë–ª—é–¥–æ')
        await query.edit_message_text(f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –µ–¥—ã –¥–ª—è {meal_type}, –∏ —è –æ–ø—Ä–µ–¥–µ–ª—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π.")
    elif query.data == "text_analysis":
        meal_type = context.user_data.get('selected_meal_type', 'üçΩÔ∏è –ë–ª—é–¥–æ')
        await query.edit_message_text(f"üìù –û–ø–∏—à–∏—Ç–µ –µ–¥—É —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è {meal_type}, –∏ —è –æ–ø—Ä–µ–¥–µ–ª—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: '–ë–æ–ª—å—à–∞—è –ø–∏—Ü—Ü–∞ —Å –ø–µ–ø–ø–µ—Ä–æ–Ω–∏ –∏ —Å—ã—Ä–æ–º'")
    elif query.data == "voice_analysis":
        meal_type = context.user_data.get('selected_meal_type', 'üçΩÔ∏è –ë–ª—é–¥–æ')
        await query.edit_message_text(f"üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –µ–¥—ã –¥–ª—è {meal_type}, –∏ —è –æ–ø—Ä–µ–¥–µ–ª—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä, —Å–∫–∞–∂–∏—Ç–µ: '–ë–æ–ª—å—à–∞—è –ø–∏—Ü—Ü–∞ —Å –ø–µ–ø–ø–µ—Ä–æ–Ω–∏ –∏ —Å—ã—Ä–æ–º'")
    elif query.data == "quick_photo_analysis":
        context.user_data['quick_analysis_mode'] = True
        await query.edit_message_text("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –µ–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–ª–æ—Ä–∏–π.\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—á–µ—Ç.")
    elif query.data == "quick_text_analysis":
        context.user_data['quick_analysis_mode'] = True
        await query.edit_message_text("üìù –û–ø–∏—à–∏—Ç–µ –µ–¥—É —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–ª–æ—Ä–∏–π.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: '–ë–æ–ª—å—à–∞—è –ø–∏—Ü—Ü–∞ —Å –ø–µ–ø–ø–µ—Ä–æ–Ω–∏ –∏ —Å—ã—Ä–æ–º'\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—á–µ—Ç.")
    elif query.data == "quick_voice_analysis":
        context.user_data['quick_analysis_mode'] = True
        await query.edit_message_text("üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –µ–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–ª–æ—Ä–∏–π.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä, —Å–∫–∞–∂–∏—Ç–µ: '–ë–æ–ª—å—à–∞—è –ø–∏—Ü—Ü–∞ —Å –ø–µ–ø–ø–µ—Ä–æ–Ω–∏ –∏ —Å—ã—Ä–æ–º'\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—á–µ—Ç.")
    elif query.data == "profile":
        await show_profile(query, context)
    elif query.data == "history":
        await show_calorie_history_menu(query, context)
    elif query.data == "history_today":
        await show_calorie_history(query, context, "today")
    elif query.data == "history_yesterday":
        await show_calorie_history(query, context, "yesterday")
    elif query.data == "history_week":
        await show_calorie_history(query, context, "week")
    elif query.data == "back_to_main":
        await show_main_menu(query, context)
    elif query.data == "add_food":
        await show_meal_type_menu(query, context)
    elif query.data == "quick_analysis":
        await show_quick_analysis_menu(query, context)
    elif query.data == "main_menu_submenu":
        await show_main_menu_submenu(query, context)
    elif query.data in ["meal_breakfast", "meal_lunch", "meal_dinner", "meal_snack"]:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ (–Ω–æ–≤—ã–π –¥–µ–Ω—å)
        await check_and_reset_daily_meals(context)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        meal_types = {
            "meal_breakfast": "üåÖ –ó–∞–≤—Ç—Ä–∞–∫",
            "meal_lunch": "üçΩÔ∏è –û–±–µ–¥", 
            "meal_dinner": "üåô –£–∂–∏–Ω",
            "meal_snack": "üçé –ü–µ—Ä–µ–∫—É—Å"
        }
        meal_keys = {
            "meal_breakfast": "breakfast",
            "meal_lunch": "lunch",
            "meal_dinner": "dinner",
            "meal_snack": "snack"
        }
        
        context.user_data['selected_meal_type'] = meal_types[query.data]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –≤ —Å–ø–∏—Å–æ–∫ (–∫—Ä–æ–º–µ –ø–µ—Ä–µ–∫—É—Å–∞)
        if query.data != "meal_snack":
            if 'selected_meals_today' not in context.user_data:
                context.user_data['selected_meals_today'] = set()
            context.user_data['selected_meals_today'].add(meal_keys[query.data])
        
        await show_add_food_menu(query, context)
    elif query.data == "meal_type":
        await show_meal_type_menu(query, context)
    elif query.data.startswith("gender_"):
        await handle_gender_selection(query, context)
    elif query.data.startswith("activity_"):
        await handle_activity_selection(query, context)
    elif query.data == "edit_profile":
        await start_registration_flow(query, context)
    elif query.data == "confirm_reset":
        await confirm_reset(query, context)
    elif query.data == "cancel_reset":
        await cancel_reset(query, context)

async def start_registration_flow(query, context):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user_id = query.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = {
        'user_id': user_id,
        'username': query.from_user.username
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    context.user_data['registration_data'] = user_data
    context.user_data['registration_step'] = 'name'
    
    await query.edit_message_text(
        "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    )

async def show_profile(query, context):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = query.from_user.id
    user = db.get_user(user_id)
    
    if user:
        profile_text = f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        profile_text += f"–ò–º—è: {user.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        profile_text += f"–ü–æ–ª: {user.get('gender', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        profile_text += f"–í–æ–∑—Ä–∞—Å—Ç: {user.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω')} –ª–µ—Ç\n"
        profile_text += f"–†–æ—Å—Ç: {user.get('height', '–ù–µ —É–∫–∞–∑–∞–Ω')} —Å–º\n"
        profile_text += f"–í–µ—Å: {user.get('weight', '–ù–µ —É–∫–∞–∑–∞–Ω')} –∫–≥\n"
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        activity_display = {
            '—Å–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞': 'üè¢ –°–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞ (–æ—Ñ–∏—Å, —É—á–µ–±–∞)',
            '–ª–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å': 'üö∂ –õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–ø—Ä–æ–≥—É–ª–∫–∏, –¥–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞)',
            '—É–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å': 'üèÉ –£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—Å–ø–æ—Ä—Ç 3-5 —Ä–∞–∑/–Ω–µ–¥–µ–ª—é)',
            '–≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å': 'üí™ –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—Å–ø–æ—Ä—Ç 6-7 —Ä–∞–∑/–Ω–µ–¥–µ–ª—é)',
            '—Ñ–∏–∑–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞': 'üèóÔ∏è –§–∏–∑–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞ (—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ, –≥—Ä—É–∑—á–∏–∫)'
        }
        activity_level = user.get('activity_level', '–ù–µ —É–∫–∞–∑–∞–Ω')
        activity_text = activity_display.get(activity_level, activity_level)
        profile_text += f"–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activity_text}\n"
        daily_calories = user.get('daily_calories', '–ù–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞')
        if daily_calories != '–ù–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞':
            profile_text += f"–°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: **{daily_calories} –∫–∫–∞–ª**\n\n"
            profile_text += "üìä **–†–∞—Å—á–µ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞:**\n"
            profile_text += f"‚Ä¢ –§–æ—Ä–º—É–ª–∞ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞\n"
            profile_text += f"‚Ä¢ –í–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
        else:
            profile_text += f"–°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {daily_calories}"
        
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="edit_profile")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(profile_text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await query.edit_message_text("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.")

async def show_calorie_history_menu(query, context):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–ª–æ—Ä–∏–π"""
    keyboard = [
        [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="history_today")],
        [InlineKeyboardButton("üìÖ –í—á–µ—Ä–∞", callback_data="history_yesterday")],
        [InlineKeyboardButton("üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="history_week")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üìä **–ò—Å—Ç–æ—Ä–∏—è –∫–∞–ª–æ—Ä–∏–π**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_calorie_history(query, context, period="today"):
    """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–ª–æ—Ä–∏–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    user_id = query.from_user.id
    from datetime import datetime, date, timedelta
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–∏–æ–¥–∞
    today = date.today()
    if period == "today":
        start_date = today
        end_date = today
        period_name = "—Å–µ–≥–æ–¥–Ω—è"
    elif period == "yesterday":
        start_date = today - timedelta(days=1)
        end_date = today - timedelta(days=1)
        period_name = "–≤—á–µ—Ä–∞"
    elif period == "week":
        start_date = today - timedelta(days=7)
        end_date = today
        period_name = "–∑–∞ –Ω–µ–¥–µ–ª—é"
    else:
        start_date = today
        end_date = today
        period_name = "—Å–µ–≥–æ–¥–Ω—è"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞ –ø–µ—Ä–∏–æ–¥
    history = db.get_user_calorie_history_by_period(user_id, start_date, end_date)
    logger.info(f"Retrieved {len(history)} records for user {user_id} from {start_date} to {end_date}")
    
    if history:
        total_calories = 0
        for record in history:
            calories = record['calories']
            if isinstance(calories, str):
                try:
                    calories = int(calories)
                except ValueError:
                    logger.warning(f"Invalid calories value: {calories}")
                    continue
            total_calories += calories
        history_text = f"üìä **–ò—Å—Ç–æ—Ä–∏—è –∫–∞–ª–æ—Ä–∏–π –∑–∞ {period_name}**\n\n"
        history_text += f"**–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π: {total_calories} –∫–∫–∞–ª**\n\n"
        
        if period == "week":
            # –î–ª—è –Ω–µ–¥–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
            weekly_data = db.get_weekly_calories_summary(user_id)
            daily_data = weekly_data['daily_data']
            total_weekly = weekly_data['total_weekly']
            
            history_text += f"**–ù–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞:**\n"
            history_text += f"–í—Å–µ–≥–æ –∑–∞ –Ω–µ–¥–µ–ª—é: {total_weekly} –∫–∫–∞–ª\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
            for date_str, data in daily_data.items():
                try:
                    date_obj = datetime.strptime(date_str, '%Y-%m-%d').date()
                    day_name = date_obj.strftime('%A')
                    calories = data['calories']
                    meals = data['meals']
                    history_text += f"üìÖ **{day_name}** ({date_str}): {calories} –∫–∫–∞–ª ({meals} –ø—Ä–∏–µ–º–æ–≤)\n"
                except Exception as e:
                    logger.warning(f"Error formatting date {date_str}: {e}")
                    history_text += f"üìÖ **{date_str}**: {data['calories']} –∫–∫–∞–ª ({data['meals']} –ø—Ä–∏–µ–º–æ–≤)\n"
        else:
            # –î–ª—è —Å–µ–≥–æ–¥–Ω—è –∏ –≤—á–µ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
            for record in history:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                try:
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
                    created_at = record['created_at']
                    
                    if isinstance(created_at, str):
                        if 'T' in created_at:
                            # ISO —Ñ–æ—Ä–º–∞—Ç
                            record_datetime = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                        else:
                            # SQLite —Ñ–æ—Ä–º–∞—Ç
                            record_datetime = datetime.strptime(created_at, '%Y-%m-%d %H:%M:%S')
                    else:
                        # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –æ–±—ä–µ–∫—Ç datetime
                        record_datetime = created_at
                    
                    formatted_time = record_datetime.strftime("%H:%M")
                except Exception as e:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    logger.warning(f"Error parsing time for record: {e}")
                    if isinstance(record['created_at'], str) and ' ' in record['created_at']:
                        formatted_time = record['created_at'].split(' ')[-1][:5]
                    else:
                        formatted_time = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                history_text += f"‚Ä¢ {record['food_name']}: {record['calories']} –∫–∫–∞–ª\n"
                history_text += f"  –ò—Å—Ç–æ—á–Ω–∏–∫: {record['source']} | {formatted_time}\n\n"
        
        keyboard = [
            [InlineKeyboardButton("üìä –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="history")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(history_text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        keyboard = [
            [InlineKeyboardButton("üìä –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="history")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üìä **–ò—Å—Ç–æ—Ä–∏—è –∫–∞–ª–æ—Ä–∏–π –∑–∞ {period_name}**\n\n"
            f"–ó–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
            f"–ù–∞—á–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–¥—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é!",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

async def show_main_menu(query, context):
    """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = query.from_user.id
    user = db.get_user(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ (–Ω–æ–≤—ã–π –¥–µ–Ω—å)
    await check_and_reset_daily_meals(context)
    
    if user:
        keyboard = [
            [InlineKeyboardButton("üçΩÔ∏è –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ", callback_data="add_food")],
            [InlineKeyboardButton("üîç –•–æ—á—É –∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π", callback_data="quick_analysis")],
            [InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="main_menu_submenu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        daily_calories = user.get('daily_calories', 0)
        await query.edit_message_text(
            f"üçï –ü—Ä–∏–≤–µ—Ç, {user.get('name', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}!\n\n"
            f"–í–∞—à–∞ —Å—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {daily_calories} –∫–∫–∞–ª\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∞–Ω–∞–ª–∏–∑–∞:",
            reply_markup=reply_markup
        )
    else:
        await start_registration(query, context)

async def show_analysis_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞"""
    keyboard = [
        [InlineKeyboardButton("üçΩÔ∏è –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ", callback_data="add_food")],
        [InlineKeyboardButton("üîç –•–æ—á—É –∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π", callback_data="quick_analysis")],
        [InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="main_menu_submenu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üîÑ –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?",
        reply_markup=reply_markup
    )

async def check_and_reset_daily_meals(context):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –∏ –æ–±—â—É—é —Å—É–º–º—É –∫–∞–ª–æ—Ä–∏–π –≤ –ø–æ–ª–Ω–æ—á—å"""
    from datetime import datetime, date
    
    current_date = date.today()
    last_reset_date = context.user_data.get('last_reset_date')
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –¥–µ–Ω—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    if last_reset_date != current_date:
        context.user_data['selected_meals_today'] = set()
        context.user_data['last_reset_date'] = current_date
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –∫–∞–ª–æ—Ä–∏–π –∑–∞ –¥–µ–Ω—å
        context.user_data['daily_calories_sum'] = 0
        logger.info(f"Daily meals reset for new day: {current_date}")

# –£–¥–∞–ª—è–µ–º —Å–ª–æ–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏

# –§—É–Ω–∫—Ü–∏—è get_daily_calories_sum —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

async def show_meal_type_menu(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏"""
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ (–Ω–æ–≤—ã–π –¥–µ–Ω—å)
    await check_and_reset_daily_meals(context)
    
    # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    selected_meals = context.user_data.get('selected_meals_today', set())
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    keyboard = []
    
    if "breakfast" not in selected_meals:
        keyboard.append([InlineKeyboardButton("üåÖ –ó–∞–≤—Ç—Ä–∞–∫", callback_data="meal_breakfast")])
    if "lunch" not in selected_meals:
        keyboard.append([InlineKeyboardButton("üçΩÔ∏è –û–±–µ–¥", callback_data="meal_lunch")])
    if "dinner" not in selected_meals:
        keyboard.append([InlineKeyboardButton("üåô –£–∂–∏–Ω", callback_data="meal_dinner")])
    
    # –ü–µ—Ä–µ–∫—É—Å –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
    keyboard.append([InlineKeyboardButton("üçé –ü–µ—Ä–µ–∫—É—Å", callback_data="meal_snack")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏
    selected_text = ""
    if selected_meals:
        meal_names = []
        if "breakfast" in selected_meals:
            meal_names.append("üåÖ –ó–∞–≤—Ç—Ä–∞–∫")
        if "lunch" in selected_meals:
            meal_names.append("üçΩÔ∏è –û–±–µ–¥")
        if "dinner" in selected_meals:
            meal_names.append("üåô –£–∂–∏–Ω")
        selected_text = f"\n\n‚úÖ –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {', '.join(meal_names)}"
    
    await query.edit_message_text(
        f"üçΩÔ∏è **–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ**\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏:{selected_text}",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_main_menu_submenu(query, context):
    """–ü–æ–∫–∞–∑ –ø–æ–¥–º–µ–Ω—é –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è –∫–∞–ª–æ—Ä–∏–π", callback_data="history")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üìã **–ú–µ–Ω—é**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_quick_analysis_menu(query, context):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–ª–æ—Ä–∏–π (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—á–µ—Ç)"""
    keyboard = [
        [InlineKeyboardButton("üì∏ –ü–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", callback_data="quick_photo_analysis")],
        [InlineKeyboardButton("üìù –ü–æ –æ–ø–∏—Å–∞–Ω–∏—é", callback_data="quick_text_analysis")],
        [InlineKeyboardButton("üé§ –ü–æ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é", callback_data="quick_voice_analysis")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üîç **–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–ª–æ—Ä–∏–π**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∞–Ω–∞–ª–∏–∑–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—á–µ—Ç:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_add_food_menu(query, context):
    """–ü–æ–∫–∞–∑ –ø–æ–¥–º–µ–Ω—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞"""
    keyboard = [
        [InlineKeyboardButton("üì∏ –ü–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", callback_data="photo_analysis")],
        [InlineKeyboardButton("üìù –ü–æ –æ–ø–∏—Å–∞–Ω–∏—é", callback_data="text_analysis")],
        [InlineKeyboardButton("üé§ –ü–æ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é", callback_data="voice_analysis")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="meal_type")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üçΩÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞:",
        reply_markup=reply_markup
    )

async def handle_gender_selection(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    gender = "–º—É–∂—Å–∫–æ–π" if query.data == "gender_male" else "–∂–µ–Ω—Å–∫–∏–π"
    context.user_data['registration_data']['gender'] = gender
    context.user_data['registration_step'] = 'age'
    
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")

async def handle_activity_selection(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    activity_map = {
        "activity_sedentary": "—Å–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞",
        "activity_light": "–ª–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", 
        "activity_moderate": "—É–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
        "activity_high": "–≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
        "activity_very_high": "—Ñ–∏–∑–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞"
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"Activity selection - query.data: {repr(query.data)}")
    logger.info(f"Activity selection - activity_map: {activity_map}")
    
    activity_level = activity_map.get(query.data, "—É–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
    if activity_level is None:
        activity_level = "—É–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
        logger.warning(f"Activity selection - activity_level is None, using default: {repr(activity_level)}")
    
    logger.info(f"Activity selection - selected activity_level: {repr(activity_level)}")
    logger.info(f"Activity selection - activity_level type: {type(activity_level)}")
    logger.info(f"Activity selection - activity_level.lower(): {repr(activity_level.lower())}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ activity_level –Ω–µ —Ä–∞–≤–µ–Ω callback_data
    if activity_level.startswith('activity_'):
        logger.error(f"Activity selection - ERROR: activity_level is callback_data: {repr(activity_level)}")
        activity_level = "—É–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
        logger.info(f"Activity selection - Fixed activity_level to: {repr(activity_level)}")
    
    context.user_data['registration_data']['activity_level'] = activity_level
    context.user_data['registration_step'] = 'complete'
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    user_data = context.user_data['registration_data']
    logger.info(f"Activity selection - final user_data: {user_data}")
    await complete_registration(query, context, user_data)

async def handle_quick_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—á–µ—Ç)"""
    try:
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = db.get_user(user_id)
        if not user:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /start")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –≤ –Ω–∞–∏–ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        file = await context.bot.get_file(photo.file_id)
        image_data = await file.download_as_bytearray()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        result = analyze_food_image(image_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        await update.message.reply_text(f"üîç **–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–ª–æ—Ä–∏–π**\n\n{result}\n\nüí° –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—á–µ—Ç", parse_mode='Markdown')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        await show_analysis_menu(update, context)
        
    except Exception as e:
        logging.error(f"Error in quick photo analysis: {e}")
        await update.message.reply_text("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    try:
        user_id = update.effective_user.id
        username = update.effective_user.username or "unknown"
        
        logger.info(f"User {user_id} ({username}) sent photo for analysis")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = db.get_user(user_id)
        if not user:
            logger.warning(f"Unregistered user {user_id} tried to analyze photo")
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /start")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        if context.user_data.get('quick_analysis_mode'):
            context.user_data['quick_analysis_mode'] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
            logger.info(f"User {user_id} using quick analysis mode for photo")
            await handle_quick_photo(update, context)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –≤ –Ω–∞–∏–ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        file = await context.bot.get_file(photo.file_id)
        image_data = await file.download_as_bytearray()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
        meal_type = context.user_data.get('selected_meal_type', 'üçΩÔ∏è –ë–ª—é–¥–æ')
        logger.info(f"Analyzing photo for {meal_type} for user {user_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        await update.message.reply_text(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {meal_type}...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        result = analyze_food_image(image_data)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        calories = extract_calories_from_text(result)
        if calories:
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
            meal_type = context.user_data.get('selected_meal_type', 'üçΩÔ∏è –ë–ª—é–¥–æ')
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            db.add_calorie_record(user_id, meal_type, calories, "photo")
            logger.info(f"Saved photo analysis: {calories} calories for user {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –∫–∞–ª–æ—Ä–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            daily_sum = db.get_daily_calories_sum(user_id)
            daily_calories = user.get('daily_calories', 0)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            result = format_calorie_response(calories, daily_sum, daily_calories)
        else:
            logger.warning(f"Could not extract calories from photo analysis result: {result}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await update.message.reply_text(result)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        await show_analysis_menu(update, context)
        
    except Exception as e:
        logger.error(f"Error handling photo for user {user_id}: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_quick_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—á–µ—Ç)"""
    try:
        text = update.message.text
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if 'registration_step' in context.user_data:
            await handle_registration_text(update, context, text)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = db.get_user(user_id)
        if not user:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /start")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        result = analyze_food_text(text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        await update.message.reply_text(f"üîç **–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–ª–æ—Ä–∏–π**\n\n{result}\n\nüí° –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—á–µ—Ç", parse_mode='Markdown')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        await show_analysis_menu(update, context)
        
    except Exception as e:
        logging.error(f"Error in quick text analysis: {e}")
        await update.message.reply_text("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        text = update.message.text
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if 'registration_step' in context.user_data:
            await handle_registration_text(update, context, text)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = db.get_user(user_id)
        if not user:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /start")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        if context.user_data.get('quick_analysis_mode'):
            context.user_data['quick_analysis_mode'] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
            await handle_quick_text(update, context)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
        meal_type = context.user_data.get('selected_meal_type', 'üçΩÔ∏è –ë–ª—é–¥–æ')
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        await update.message.reply_text(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {meal_type}...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        result = analyze_food_text(text)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        calories = extract_calories_from_text(result)
        if calories:
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
            meal_type = context.user_data.get('selected_meal_type', 'üçΩÔ∏è –ë–ª—é–¥–æ')
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            db.add_calorie_record(user_id, meal_type, calories, "text")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –∫–∞–ª–æ—Ä–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            daily_sum = db.get_daily_calories_sum(user_id)
            daily_calories = user.get('daily_calories', 0)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            result = format_calorie_response(calories, daily_sum, daily_calories)
        else:
            logger.warning(f"Could not extract calories from result: {result}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await update.message.reply_text(result)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        await show_analysis_menu(update, context)
        
    except Exception as e:
        logger.error(f"Error handling text: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_registration_text(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤–æ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    step = context.user_data.get('registration_step')
    user_data = context.user_data.get('registration_data', {})
    
    if step == 'name':
        user_data['name'] = text
        context.user_data['registration_step'] = 'gender'
        
        keyboard = [
            [InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="gender_male")],
            [InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {text}!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
            reply_markup=reply_markup
        )
    
    elif step == 'age':
        age = validate_user_input(text, "age")
        if age is not None:
            user_data['age'] = age
            context.user_data['registration_step'] = 'height'
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:")
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (10-120 –ª–µ—Ç):")
    
    elif step == 'height':
        height = validate_user_input(text, "height")
        if height is not None:
            user_data['height'] = height
            context.user_data['registration_step'] = 'weight'
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:")
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (100-250 —Å–º):")
    
    elif step == 'weight':
        weight = validate_user_input(text, "weight")
        if weight is not None:
            user_data['weight'] = weight
            context.user_data['registration_step'] = 'activity'
            
            keyboard = [
                [InlineKeyboardButton("üè¢ –°–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞ (–æ—Ñ–∏—Å, —É—á–µ–±–∞)", callback_data="activity_sedentary")],
                [InlineKeyboardButton("üö∂ –õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–ø—Ä–æ–≥—É–ª–∫–∏, –¥–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞)", callback_data="activity_light")],
                [InlineKeyboardButton("üèÉ –£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—Å–ø–æ—Ä—Ç 3-5 —Ä–∞–∑/–Ω–µ–¥–µ–ª—é)", callback_data="activity_moderate")],
                [InlineKeyboardButton("üí™ –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—Å–ø–æ—Ä—Ç 6-7 —Ä–∞–∑/–Ω–µ–¥–µ–ª—é)", callback_data="activity_high")],
                [InlineKeyboardButton("üèóÔ∏è –§–∏–∑–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞ (—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ, –≥—Ä—É–∑—á–∏–∫)", callback_data="activity_very_high")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "üèÉ‚Äç‚ôÇÔ∏è **–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≤–∞—à–µ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:**\n\n"
                "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–æ—á–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–∞—à—É —Å—É—Ç–æ—á–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ª—É—á—à–µ –≤—Å–µ–≥–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤–∞—à –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (30-300 –∫–≥):")
    

async def complete_registration(update: Update, context: ContextTypes.DEFAULT_TYPE, user_data: dict):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"Complete registration - user_data: {user_data}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π
        gender = user_data.get('gender')
        age = user_data.get('age')
        height = user_data.get('height')
        weight = user_data.get('weight')
        activity_level = user_data.get('activity_level')
        
        logger.info(f"Complete registration - gender: {repr(gender)}")
        logger.info(f"Complete registration - age: {repr(age)}")
        logger.info(f"Complete registration - height: {repr(height)}")
        logger.info(f"Complete registration - weight: {repr(weight)}")
        logger.info(f"Complete registration - activity_level: {repr(activity_level)}")
        logger.info(f"Complete registration - activity_level type: {type(activity_level)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ activity_level –Ω–µ —è–≤–ª—è–µ—Ç—Å—è callback_data
        if activity_level and activity_level.startswith('activity_'):
            logger.error(f"Complete registration - ERROR: activity_level is callback_data: {repr(activity_level)}")
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            activity_map = {
                "activity_sedentary": "—Å–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞",
                "activity_light": "–ª–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", 
                "activity_moderate": "—É–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
                "activity_high": "–≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
                "activity_very_high": "—Ñ–∏–∑–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞"
            }
            activity_level = activity_map.get(activity_level, "—É–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
            logger.info(f"Complete registration - Fixed activity_level to: {repr(activity_level)}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É—Ç–æ—á–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏
        daily_calories = db.calculate_daily_calories(
            gender, age, height, weight, activity_level
        )
        
        logger.info(f"Complete registration - calculated daily_calories: {daily_calories}")
        
        user_data['daily_calories'] = daily_calories
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if db.add_user(user_data):
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            context.user_data.pop('registration_step', None)
            context.user_data.pop('registration_data', None)
            
            keyboard = [
                [InlineKeyboardButton("üçï –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –µ–¥—ã", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"–í–∞—à–∞ —Å—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {daily_calories} –∫–∫–∞–ª\n\n"
                f"–¢–µ–ø–µ—Ä—å —è —Å–º–æ–≥—É —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏ –≤ –µ–¥–µ —Å –≤–∞—à–µ–π –Ω–æ—Ä–º–æ–π!",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    except Exception as e:
        logger.error(f"Error completing registration: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset"""
    user_id = update.effective_user.id
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ", callback_data="confirm_reset")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reset")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!\n\n"
        "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –í–°–ï –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        "‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
        "‚Ä¢ –í—Å—é –∏—Å—Ç–æ—Ä–∏—é –∫–∞–ª–æ—Ä–∏–π\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–õ–¨–ó–Ø –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=reply_markup
    )

async def dayres_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /dayres - —Å–±—Ä–æ—Å –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = db.get_user(user_id)
    if not user:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['selected_meals_today'] = set()
    context.user_data['daily_calories_sum'] = 0
    context.user_data['last_reset_date'] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞—Ç—É, —á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å–Ω–æ–≤–∞ —Å—Ä–∞–±–æ—Ç–∞–ª —Å–±—Ä–æ—Å
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    success = db.reset_daily_calories(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    from datetime import date
    current_date = date.today()
    
    logger.info(f"Daily reset for user {user_id} on {current_date}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("üçΩÔ∏è –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ", callback_data="add_food")],
        [InlineKeyboardButton("üîç –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="quick_analysis")],
        [InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="main_menu_submenu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if success:
        await update.message.reply_text(
            "‚úÖ **–î–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã!**\n\n"
            "üîÑ –ß—Ç–æ –±—ã–ª–æ —Å–±—Ä–æ—à–µ–Ω–æ:\n"
            "‚Ä¢ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ (–∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥, —É–∂–∏–Ω)\n"
            "‚Ä¢ –í—Å–µ –∑–∞–ø–∏—Å–∏ –∫–∞–ª–æ—Ä–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å\n"
            "‚Ä¢ –°—á–µ—Ç—á–∏–∫ –∫–∞–ª–æ—Ä–∏–π –∑–∞ –¥–µ–Ω—å\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–Ω–æ–≤–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥ –∏ —É–∂–∏–Ω!",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            "‚ö†Ô∏è **–ß–∞—Å—Ç–∏—á–Ω—ã–π —Å–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω!**\n\n"
            "‚úÖ –°–±—Ä–æ—à–µ–Ω—ã:\n"
            "‚Ä¢ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ (–∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥, —É–∂–∏–Ω)\n"
            "‚Ä¢ –°—á–µ—Ç—á–∏–∫ –∫–∞–ª–æ—Ä–∏–π –∑–∞ –¥–µ–Ω—å\n\n"
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –∑–∞–ø–∏—Å–∏ –∫–∞–ª–æ—Ä–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

async def confirm_reset(query, context):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö"""
    user_id = query.from_user.id
    
    try:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if db.reset_user_data(user_id):
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context.user_data.clear()
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_registration")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!\n\n"
                "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å, –∏—Å—Ç–æ—Ä–∏—è –∫–∞–ª–æ—Ä–∏–π –∏ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã.\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ:",
                reply_markup=reply_markup
            )
        else:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
            )
    
    except Exception as e:
        logger.error(f"Error confirming reset: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

async def cancel_reset(query, context):
    """–û—Ç–º–µ–Ω–∞ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö"""
    user_id = query.from_user.id
    user = db.get_user(user_id)
    
    if user:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(query, context)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await start_registration(query, context)

async def handle_quick_voice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—á–µ—Ç)"""
    try:
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = db.get_user(user_id)
        if not user:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /start")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        voice = update.message.voice
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ
        file = await context.bot.get_file(voice.file_id)
        audio_data = await file.download_as_bytearray()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await update.message.reply_text("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –≥–æ–ª–æ—Å –≤ —Ç–µ–∫—Å—Ç
        text = transcribe_voice(audio_data)
        
        if text:
            await update.message.reply_text(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")
            await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            result = analyze_food_text(text)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            await update.message.reply_text(f"üîç **–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–ª–æ—Ä–∏–π**\n\n{result}\n\nüí° –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—á–µ—Ç", parse_mode='Markdown')
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
            await show_analysis_menu(update, context)
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            
    except Exception as e:
        logging.error(f"Error in quick voice analysis: {e}")
        await update.message.reply_text("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = db.get_user(user_id)
        if not user:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /start")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        if context.user_data.get('quick_analysis_mode'):
            context.user_data['quick_analysis_mode'] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
            await handle_quick_voice(update, context)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        voice = update.message.voice
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ
        file = await context.bot.get_file(voice.file_id)
        audio_data = await file.download_as_bytearray()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await update.message.reply_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –≥–æ–ª–æ—Å –≤ —Ç–µ–∫—Å—Ç
        text = transcribe_voice(audio_data)
        
        if text:
            await update.message.reply_text(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
            meal_type = context.user_data.get('selected_meal_type', 'üçΩÔ∏è –ë–ª—é–¥–æ')
            await update.message.reply_text(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {meal_type}...")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            result = analyze_food_text(text)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            calories = extract_calories_from_text(result)
            if calories:
                # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
                meal_type = context.user_data.get('selected_meal_type', 'üçΩÔ∏è –ë–ª—é–¥–æ')
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                db.add_calorie_record(user_id, meal_type, calories, "voice")
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –∫–∞–ª–æ—Ä–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                daily_sum = db.get_daily_calories_sum(user_id)
                daily_calories = user.get('daily_calories', 0)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                result = format_calorie_response(calories, daily_sum, daily_calories)
            else:
                logger.warning(f"Could not extract calories from result: {result}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await update.message.reply_text(result)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            await show_analysis_menu(update, context)
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")
        
    except Exception as e:
        logger.error(f"Error handling voice: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("reset", reset_command))
    application.add_handler(CommandHandler("dayres", dayres_command))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    print("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ –Ω–æ–≤–æ–≥–æ –¥–Ω—è")
    await application.run_polling()

if __name__ == '__main__':
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å asyncio.run()
        asyncio.run(main())
    except RuntimeError as e:
        if "This event loop is already running" in str(e) or "Cannot close a running event loop" in str(e):
            # –ï—Å–ª–∏ event loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥
            try:
                import nest_asyncio
                nest_asyncio.apply()
                asyncio.run(main())
            except ImportError:
                # –ï—Å–ª–∏ nest_asyncio –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
                loop = asyncio.get_event_loop()
                if loop.is_running():
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º loop
                    loop.create_task(main())
                else:
                    loop.run_until_complete(main())
        else:
            raise e
