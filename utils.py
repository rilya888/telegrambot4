"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è Telegram –±–æ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–ª–æ—Ä–∏–π
"""
import re
import hashlib
import logging
from typing import Optional, Any
from telegram import Update

logger = logging.getLogger(__name__)

def validate_user_input(text: str, input_type: str) -> Optional[Any]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
    try:
        if input_type == "age":
            age = int(text)
            if 10 <= age <= 120:
                return age
            return None
        elif input_type == "height":
            height = float(text)
            if 100 <= height <= 250:
                return height
            return None
        elif input_type == "weight":
            weight = float(text)
            if 30 <= weight <= 300:
                return weight
            return None
        elif input_type == "name":
            if 2 <= len(text) <= 50 and text.replace(" ", "").isalpha():
                return text.strip()
            return None
        return text
    except (ValueError, TypeError):
        return None

def extract_calories_from_text(text: str) -> Optional[int]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–ª–æ—Ä–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    try:
        # –ò—â–µ–º —á–∏—Å–ª–∞ –≤ —Ç–µ–∫—Å—Ç–µ
        numbers = re.findall(r'\d+', text)
        if numbers:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
            return int(numbers[0])
        return None
    except (ValueError, TypeError):
        return None

def format_calorie_response(calories: int, daily_sum: int, daily_calories: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –∫–∞–ª–æ—Ä–∏—è–º–∏"""
    if daily_calories > 0:
        percentage = (daily_sum / daily_calories) * 100
        return (f"–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π: {calories}\n\n"
                f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {daily_sum}\n\n"
                f"üìä –≠—Ç–æ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {percentage:.1f}% –æ—Ç –≤–∞—à–µ–π —Å—É—Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º—ã ({daily_calories} –∫–∫–∞–ª)")
    else:
        return (f"–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π: {calories}\n\n"
                f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {daily_sum}")

async def safe_reply(update: Update, text: str, **kwargs) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        if update.message:
            await update.message.reply_text(text, **kwargs)
        elif update.callback_query:
            await update.callback_query.edit_message_text(text, **kwargs)
        return True
    except Exception as e:
        logger.error(f"Error sending message: {e}")
        return False

def create_image_hash(image_data: bytes) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ö—ç—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return hashlib.md5(image_data).hexdigest()

def create_text_hash(text: str) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ö—ç—à–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return hashlib.md5(text.lower().encode()).hexdigest()

def format_activity_display(activity_level: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    activity_display = {
        '—Å–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞': 'üè¢ –°–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞ (–æ—Ñ–∏—Å, —É—á–µ–±–∞)',
        '–ª–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å': 'üö∂ –õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–ø—Ä–æ–≥—É–ª–∫–∏, –¥–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞)',
        '—É–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å': 'üèÉ –£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—Å–ø–æ—Ä—Ç 3-5 —Ä–∞–∑/–Ω–µ–¥–µ–ª—é)',
        '–≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å': 'üí™ –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—Å–ø–æ—Ä—Ç 6-7 —Ä–∞–∑/–Ω–µ–¥–µ–ª—é)',
        '—Ñ–∏–∑–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞': 'üèóÔ∏è –§–∏–∑–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞ (—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ, –≥—Ä—É–∑—á–∏–∫)'
    }
    return activity_display.get(activity_level, activity_level)

def format_meal_display(meal_key: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏"""
    meal_display = {
        'breakfast': 'üåÖ –ó–∞–≤—Ç—Ä–∞–∫',
        'lunch': 'üçΩÔ∏è –û–±–µ–¥',
        'dinner': 'üåô –£–∂–∏–Ω',
        'snack': 'üçé –ü–µ—Ä–µ–∫—É—Å'
    }
    return meal_display.get(meal_key, 'üçΩÔ∏è –ë–ª—é–¥–æ')
